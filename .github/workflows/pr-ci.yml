name: Pull Request CI

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '18.x'

# Cancel previous runs if a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Skip CI for draft PRs unless explicitly requested
  check-draft:
    name: Check if Draft PR
    runs-on: ubuntu-latest
    outputs:
      is-draft: ${{ steps.check.outputs.is-draft }}
    steps:
      - name: Check draft status
        id: check
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "is-draft=true" >> $GITHUB_OUTPUT
            echo "‚è∏Ô∏è Skipping CI for draft PR"
          else
            echo "is-draft=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Running CI for ready PR"
          fi

  pr-info:
    name: PR Information
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    
    steps:
      - name: PR Details
        run: |
          echo "üìã Pull Request Information"
          echo "=========================="
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Title: ${{ github.event.pull_request.title }}"
          echo "Author: ${{ github.event.pull_request.user.login }}"
          echo "Base Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Head Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Changed Files: ${{ github.event.pull_request.changed_files }}"
          echo "Additions: +${{ github.event.pull_request.additions }}"
          echo "Deletions: -${{ github.event.pull_request.deletions }}"

  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint..."
          npm run lint

      - name: TypeScript type check
        run: |
          echo "üîß Running TypeScript type check..."
          npx tsc --noEmit

      - name: Check code formatting
        run: |
          echo "üíÖ Checking code formatting..."
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" || {
            echo "‚ùå Code formatting issues found."
            echo "üí° Fix with: npm run format"
            exit 1
          }

  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment
        run: |
          echo "NEXT_PUBLIC_GEMINI_API_KEY=test_key_for_pr" >> .env.local
          echo "MONGODB_URI=mongodb://localhost:27017/toolbox_test_pr" >> .env.local

      - name: Build application
        run: |
          echo "üèóÔ∏è Building application..."
          npm run build

      - name: Check build size
        run: |
          echo "üìä Build size analysis:"
          du -sh out/ || du -sh .next/
          echo "üì¶ Largest files:"
          find out/ -type f -name "*.js" -exec ls -lh {} + | sort -k5 -hr | head -10 || \
          find .next/ -type f -name "*.js" -exec ls -lh {} + | sort -k5 -hr | head -10

  security-check:
    name: Security & Dependencies
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: |
          echo "üîí Running security audit..."
          npm audit --audit-level=moderate || {
            echo "‚ö†Ô∏è Security vulnerabilities found!"
            echo "üí° Run 'npm audit fix' to resolve"
            exit 1
          }

      - name: Check for vulnerable packages
        run: |
          echo "üîç Checking for known vulnerabilities..."
          npm audit --audit-level=high --json || echo "Vulnerabilities detected"

  changed-files:
    name: Analyze Changed Files
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is-draft == 'false'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        run: |
          echo "üìÅ Files changed in this PR:"
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD
          
          echo "üîß TypeScript/JavaScript files:"
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(ts|tsx|js|jsx)$' || echo "No TS/JS files changed"
          
          echo "üé® Style files:"
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(css|scss)$' || echo "No style files changed"
          
          echo "üìù Config files:"
          git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -E '\.(json|yml|yaml|md)$' || echo "No config files changed"

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [check-draft, code-quality, build-test]
    if: needs.check-draft.outputs.is-draft == 'false' && needs.code-quality.result == 'success' && needs.build-test.result == 'success'
    
    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for preview
        env:
          NEXT_PUBLIC_GEMINI_API_KEY: ${{ secrets.NEXT_PUBLIC_GEMINI_API_KEY }}
          MONGODB_URI: ${{ secrets.MONGODB_URI_STAGING }}
        run: npm run build

      - name: Comment preview info
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## üöÄ Preview Deployment
            
            ‚úÖ Your changes have been built successfully!
            
            **Build Details:**
            - Node.js: ${{ env.NODE_VERSION }}
            - Commit: \`${{ github.event.pull_request.head.sha }}\`
            - Branch: \`${{ github.event.pull_request.head.ref }}\`
            
            **Next Steps:**
            - Manual deployment to preview environment available
            - All CI checks passed ‚úÖ
            
            ---
            *This comment is automatically updated for each commit.*`;
            
            // Find existing bot comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview Deployment')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

  pr-validation:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [check-draft, pr-info, code-quality, build-test, security-check, changed-files]
    if: always() && needs.check-draft.outputs.is-draft == 'false'
    
    steps:
      - name: Validation Summary
        run: |
          echo "üéØ Pull Request Validation Summary"
          echo "================================="
          
          # Check each job result
          if [ "${{ needs.code-quality.result }}" = "success" ]; then
            echo "‚úÖ Code Quality: PASSED"
          else
            echo "‚ùå Code Quality: FAILED"
          fi
          
          if [ "${{ needs.build-test.result }}" = "success" ]; then
            echo "‚úÖ Build & Test: PASSED"
          else
            echo "‚ùå Build & Test: FAILED"
          fi
          
          if [ "${{ needs.security-check.result }}" = "success" ]; then
            echo "‚úÖ Security Check: PASSED"
          else
            echo "‚ùå Security Check: FAILED"
          fi
          
          if [ "${{ needs.changed-files.result }}" = "success" ]; then
            echo "‚úÖ File Analysis: PASSED"
          else
            echo "‚ùå File Analysis: FAILED"
          fi
          
          echo ""
          echo "üìã PR Ready for Review:"
          
          # Determine overall status
          if [ "${{ needs.code-quality.result }}" = "success" ] && \
             [ "${{ needs.build-test.result }}" = "success" ] && \
             [ "${{ needs.security-check.result }}" = "success" ]; then
            echo "üéâ All checks passed! This PR is ready for review."
            exit 0
          else
            echo "üí• Some checks failed. Please fix the issues before requesting review."
            exit 1
          fi